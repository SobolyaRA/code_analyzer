package org.example.vulnerability;

import org.example.model.User;
import org.example.model.UserService;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;


@Controller
public class Idor {
    private final UserService userService;

    public Idor(UserService userService) {
        this.userService = userService;
    }

    public class UserController {
        @RequestMapping(value = "/user/{userId}", method = RequestMethod.GET)
        public String getUser(@PathVariable String userId, Model model) {
            User user = userService.findById(userId);
            model.addAttribute("user", user);
            return "user";
        }

        @PreAuthorize("hasRole('ADMIN')")
        @RequestMapping(value = "/user/{userId}", method = RequestMethod.PUT)
        public String updateUser(@PathVariable String userId, @RequestBody User newUser, Model model) {
            User user = userService.updateUser(userId, newUser);
            model.addAttribute("user", user);
            return "user";
        }

        @PreAuthorize("hasRole('ADMIN')")
        @RequestMapping(value = "/user", method = RequestMethod.POST)
        public String createUser(@RequestBody User newUser, Model model) {
            User user = userService.createUser(newUser);
            model.addAttribute("user", user);
            return "user";
        }

        @PreAuthorize("hasRole('ADMIN')")
        @RequestMapping(value = "/user/{userId}", method = RequestMethod.DELETE)
        public String deleteUser(@PathVariable String userId, Model model) {
            userService.deleteUser(userId);
            return "user";
        }

    }
}